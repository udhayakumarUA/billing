<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>
    <base href="/">
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/angular-material.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/demo.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/material-dashboard.css">
    <!--STYLES END-->
    <!--     Fonts and icons     -->
    <link href="http://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,700,300|Material+Icons' rel='stylesheet' type='text/css'>
    <script type="text/javascript">
      window.SAILS_LOCALS = {
        me: <%-
        // Note that by putting these comments inside of the EJS tag, we prevent them from
        // being sent down to client (i.e. they are boiled away on the server along with the
        // EJS tags)
        //
        // Notice we must check that `me` exists using typeof to keep EJS from throwing
        // and displaying an ugly error message when rendering certain pages
        // (i.e. 404 /500 error pages)
        typeof me !== 'undefined' ? JSON.stringify(me) : 'null'
        // Note that we deliberately use 'null' (a string) because EJS converts the `null` literal
        // into empty string (''), which is not what we want (that would be invalid JS and cause a
        // client-side error in the browser)
        %>
      };
    </script>
  </head>

  <body ng-app="posadminApp">
  <div class="wrapper">
    <div ui-view="header"></div>
    <div class="main-panel">
      <div ui-view="nav"></div>
      <%- body %>
      <div ui-view="footer"></div>
    </div>
  </div>




    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/angular/angular.js"></script>
    <script src="/js/dependencies/angular-ui-router/release/angular-ui-router.js"></script>
    <script src="/js/dependencies/angular-animate/angular-animate.js"></script>
    <script src="/js/dependencies/angular-aria/angular-aria.js"></script>
    <script src="/js/dependencies/angular-material/angular-material.js"></script>
    <script src="/js/dependencies/jquery-3.1.0.min.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <script src="/js/dependencies/material.min.js"></script>
    <script src="/js/dependencies/chartist.min.js"></script>
    <script src="/js/dependencies/bootstrap-notify.js"></script>
    <script src="/js/dependencies/material-dashboard.js"></script>
    <script src="/js/dependencies/demo.js"></script>
    <script src="/js/app.js"></script>
    <script src="/js/controllers/changepass.js"></script>
    <script src="/js/controllers/dashboard.js"></script>
    <script src="/js/controllers/main.js"></script>
    <script src="/js/controllers/newclient.js"></script>
    <script src="/js/controllers/offlineusers.js"></script>
    <script src="/js/controllers/onlineusers.js"></script>
    <script src="/js/controllers/singleusers.js"></script>
    <script src="/js/controllers/subadmin.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
